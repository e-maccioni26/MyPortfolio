"use client"
import { cn } from "@/lib/utils"
import { motion } from "motion/react"
import type React from "react"

export const BackgroundLines = ({
  children,
  className,
  svgOptions,
}: {
  children: React.ReactNode
  className?: string
  svgOptions?: {
    duration?: number
  }
}) => {
  return (
    <div className={cn("h-[20rem] md:h-screen w-full bg-white dark:bg-black", className)}>
      <SVG svgOptions={svgOptions} />
      {children}
    </div>
  )
}

const pathVariants = {
  initial: { strokeDashoffset: 800, strokeDasharray: "50 800" },
  animate: {
    strokeDashoffset: 0,
    strokeDasharray: "20 800",
    opacity: [0, 1, 1, 0],
  },
}

const SVG = ({
  svgOptions,
}: {
  svgOptions?: {
    duration?: number
  }
}) => {
  // Définir des chemins plus courts pour éviter les problèmes de token
  const paths = [
    "M720 450C720 450 742 440 755 425C768 410 778 418 789 401C800 384 817 389 826 380C836 371 851 364 863 356C874 347 877 342 898 333C919 323 923 319 934 310C946 300 960 300 970 287C980 274 993 273 1004 263C1016 252 1026 250 1038 242C1050 233 1065 230 1074 215C1084 201 1085 209 1112 194C1139 180 1132 178 1146 170C1160 163 1168 158 1181 147C1193 137 1191 131 1217 125C1243 119 1234 118 1254 100C1274 82 1275 92 1290 76C1305 59 1313 62 1323 56C1332 51 1347 42 1361 32C1375 21 1374 25 1397 10C1420 -4 1421 -3 1431 -15",
    "M720 450C720 450 741 435 753 410C765 385 770 386 782 370C794 354 799 353 811 332C823 312 825 306 843 295C861 284 856 273 877 256C898 239 887 227 909 214C931 202 925 188 941 177C956 167 952 154 971 135C990 115 990 109 999 96C1008 82 1011 82 1032 61C1053 41 1045 48 1064 19C1082 -8 1077 -3 1093 -19C1110 -35 1105 -46 1127 -60C1149 -74 1144 -72 1154 -97C1163 -123 1165 -111 1186 -135C1206 -160 1203 -160 1220 -177C1237 -194 1236 -204 1250 -214",
    "M720 450C720 450 712 437 690 407C668 376 672 394 665 365C659 337 647 347 636 323C625 298 626 303 609 281C593 258 598 255 582 242C565 229 566 217 559 197C552 176 549 171 529 156C509 141 522 134 505 115C488 97 482 82 473 70C464 59 464 50 447 32C429 13 436 0 423 -12C410 -26 407 -44 394 -56C381 -68 373 -72 365 -96C357 -119 358 -111 338 -136C318 -161 322 -149 315 -181C307 -214 294 -202 285 -223C277 -243 275 -244 258 -263",
    "M720 450C720 450 738 448 790 446C841 445 816 441 861 437C907 433 886 437 930 436C975 436 951 432 1001 425C1051 419 1020 425 1072 424C1124 423 1114 420 1140 414C1165 408 1173 412 1214 411C1256 409 1242 406 1285 401C1328 396 1304 400 1354 399C1404 398 1381 394 1428 389C1475 384 1445 386 1497 385C1549 384 1534 382 1567 381",
    "M720 450C720 450 696 458 682 472C668 487 673 487 647 492C622 498 636 499 609 512C581 525 596 528 571 533C547 539 551 548 536 556C521 564 515 563 497 575C479 587 484 590 461 598C437 607 442 605 423 618C404 631 402 629 390 641C379 653 369 658 353 663C336 669 330 674 312 684C295 693 288 698 278 704C267 709 258 712 240 726C222 740 230 738 203 745C176 752 193 752 166 767C139 781 151 783 130 791C108 798 116 802 96 808C75 814 83 819 59 830C35 841 48 847 21 853C-4 859 10 869 -16 874",
    "M720 450C720 450 695 482 682 506C669 529 671 521 643 556C616 591 625 590 606 615C588 639 592 642 569 665C546 689 557 687 538 722C519 757 520 760 503 774C485 788 491 790 463 831C435 872 437 867 425 885C412 903 411 911 389 934C367 957 375 966 352 990C328 1015 341 1008 316 1047C291 1086 301 1060 276 1100C251 1139 259 1138 243 1153",
    "M719 450C719 450 765 459 789 476C813 493 825 487 865 495C904 504 908 510 943 523C979 536 963 535 1009 547C1056 559 1062 555 1089 568C1117 582 1133 582 1159 592C1184 602 1182 603 1233 614C1284 625 1254 632 1306 644C1358 656 1359 656 1378 670C1398 683 1406 676 1456 692C1506 709 1497 708 1527 715",
    "M720 450C720 450 727 430 734 379C740 327 742 359 757 309C772 260 761 271 772 244C784 217 777 200 786 175C796 150 797 144 808 107C820 70 812 88 819 37C826 -14 829 -0 839 -30C849 -59 844 -61 855 -98C865 -135 862 -144 876 -167C891 -190 886 -213 892 -237C899 -262 903 -255 909 -305C916 -356 917 -330 925 -374",
    "M720 450C720 450 722 499 726 520C729 541 730 550 738 589C747 628 743 639 746 659C748 680 754 693 757 732C760 771 760 765 763 805C767 845 769 822 773 868C776 914 776 901 778 940C780 979 782 990 787 1010C793 1030 791 1060 797 1082C802 1104 801 1130 808 1149C814 1168 813 1171 818 1225C822 1279 820 1267 822 1293",
    "M720 450C720 450 737 492 757 515C777 539 768 548 785 570C802 593 814 609 824 634C834 658 838 656 855 695C872 734 875 724 890 764C905 803 899 790 919 820C940 850 939 862 954 886C969 911 968 909 993 945C1019 981 1006 964 1023 1007C1040 1050 1046 1038 1059 1073C1071 1107 1081 1096 1089 1131C1097 1167 1106 1162 1125 1196",
    "M720 450C720 450 687 455 670 467C653 480 653 476 626 485C600 493 599 495 577 503C556 512 556 507 533 517C511 527 505 526 486 539C467 551 461 546 439 553C417 560 406 567 389 572C371 577 371 583 344 587C317 592 327 593 299 607C271 620 283 615 249 622C216 630 227 630 203 638C180 646 168 652 156 657C143 662 132 669 110 675C89 681 90 680 61 689C32 699 34 702 15 709C-2 717 2 719 -29 729C-62 739 -52 738 -77 744",
    "M720 450C720 450 743 465 754 490C765 516 781 501 791 525C801 548 808 538 829 564C850 591 852 582 865 601C877 621 874 621 902 643C930 665 921 655 938 681C954 707 959 709 977 720C995 731 994 731 1015 757C1037 784 1025 768 1047 795C1069 821 1065 815 1085 834C1105 854 1110 848 1124 869C1139 891 1140 881 1158 911C1176 941 1184 933 1194 948C1204 963 1221 973 1232 986C1242 998 1257 1015 1269 1026C1282 1037 1293 1040 1307 1064",
    "M720 450C720 450 718 412 716 397C714 381 713 362 710 344C707 327 708 322 701 292C694 261 699 270 694 240C689 210 693 217 689 184C686 152 686 149 682 133C679 118 682 106 681 80C681 55 677 60 675 30C673 -0 672 -7 668 -26C664 -45 664 -43 661 -78C657 -114 658 -103 653 -133C649 -163 650 -150 647 -182C643 -214 646 -214 645 -238C644 -261 640 -253 637 -291C633 -330 634 -309 630 -343C627 -377 628 -370 626 -394",
    "M720 450C720 450 730 481 739 507C748 533 751 537 766 562C780 586 774 582 787 618C801 654 793 653 809 678C825 703 815 717 829 735C844 753 845 773 852 786C859 800 862 805 872 845C882 886 885 874 894 903C904 931 911 924 921 961C931 999 927 998 940 1013C953 1028 948 1055 966 1070C983 1085 975 1105 988 1125C1001 1145 1001 1141 1007 1184C1013 1227 1018 1198 1029 1241",
    "M720 450C720 450 684 447 657 439C629 430 618 435 600 431C583 427 566 425 537 423C508 420 501 418 476 413C450 408 460 410 416 408C373 407 396 401 359 396C322 391 327 393 300 391C273 390 264 385 241 382C217 378 205 378 181 377C158 375 150 369 117 366C84 362 81 361 58 358C36 355 33 351 -3 346C-41 341 -18 345 -61 341C-104 337 -102 338 -121 332",
    "M720 450C720 450 714 428 708 410C702 393 705 397 703 372C701 348 697 345 691 330C684 315 686 312 683 292C679 272 679 273 674 255C670 236 670 244 665 214C659 184 659 200 653 172C646 144 647 151 644 136C640 120 638 107 636 96C634 86 632 77 626 54C620 30 622 28 618 16C614 4 615 -13 608 -24C601 -35 603 -51 599 -60C595 -69 593 -79 587 -100C582 -121 584 -117 578 -139C573 -160 576 -161 571 -182C567 -202 567 -198 562 -218C558 -237 555 -240 552 -260C548 -281 547 -280 541 -296C535 -311 537 -315 535 -336C532 -356 531 -360 524 -377",
    "M720 450C720 450 711 430 707 409C704 388 704 381 697 370C690 360 691 359 685 334C679 308 677 323 671 294C664 264 667 284 662 258C656 231 656 229 647 216C638 203 640 192 635 178C630 164 630 150 624 139C619 129 615 112 612 103C608 93 606 85 603 63C599 40 595 36 589 23C583 10 581 -2 576 -14C572 -27 572 -37 568 -51C563 -64 562 -67 556 -93C551 -119 550 -109 544 -129C537 -149 534 -151 531 -170C527 -188 522 -185 519 -207C517 -229 511 -224 507 -247C503 -270 501 -271 495 -287C489 -302 491 -300 484 -326C477 -351 476 -348 472 -363",
    "M720 450C720 450 723 466 728 497C733 527 731 519 740 542C748 565 744 560 748 588C753 616 756 602 761 636C767 670 768 649 771 679C775 710 775 703 781 724C787 745 787 758 791 773C795 789 798 807 804 819C809 832 806 843 811 865C816 887 816 892 822 912C828 933 830 942 833 956C836 971 839 969 846 1003C854 1038 850 1028 854 1048C858 1068 857 1074 863 1094C868 1115 867 1108 874 1138C881 1169 880 1170 887 1186C894 1202 890 1209 896 1231C902 1252 902 1245 906 1279",
    "M720 450C720 450 698 436 669 424C640 412 634 410 615 402C596 394 594 395 568 378C542 361 547 359 514 348C480 338 479 334 467 329C455 324 448 312 416 303C383 295 391 293 365 280C338 268 328 267 309 252C290 238 277 246 259 230C241 214 240 224 211 206C183 188 193 190 157 181C120 172 127 170 108 154C88 139 75 138 56 132C38 125 33 118 4 106C-24 94 -19 90 -46 81",
    "M720 450C720 450 711 475 701 516C690 556 697 559 689 579C681 598 679 597 675 642C671 687 663 677 657 700C652 723 651 724 636 764C622 804 631 802 625 827C619 851 613 856 605 892C598 928 595 924 588 957C582 991 583 991 575 1022C568 1054 566 1058 558 1084C549 1110 553 1129 542 1149C530 1169 538 1180 530 1207C522 1234 520 1245 512 1274",
    "M720 450C720 450 730 424 761 411C792 398 772 393 804 377C835 361 829 361 848 342C867 324 877 330 890 303C904 277 910 282 937 264C964 246 949 246 978 230C1008 214 990 217 1021 193C1052 169 1054 184 1065 158C1077 131 1087 139 1111 120C1134 101 1124 104 1151 86C1178 67 1167 66 1197 47C1227 28 1225 23 1239 12C1252 2 1269 -9 1282 -28C1296 -47 1305 -41 1323 -62C1341 -84 1340 -82 1368 -98",
  ]

  const colors = [
    "#46A5CA",
    "#8C2F2F",
    "#4FAE4D",
    "#D6590C",
    "#811010",
    "#247AFB",
    "#A534A0",
    "#A8A438",
    "#D6590C",
    "#46A29C",
    "#670F6D",
    "#D7C200",
    "#59BBEB",
    "#504F1C",
    "#55BC54",
    "#4D3568",
    "#9F39A5",
    "#363636",
    "#860909",
    "#6A286F",
    "#604483",
  ]

  return (
    <motion.svg
      viewBox="0 0 1440 900"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 1 }}
      className="absolute inset-0 w-full h-full"
    >
      {paths.map((path, idx) => (
        <motion.path
          d={path}
          stroke={colors[idx % colors.length]}
          strokeWidth="2.3"
          strokeLinecap="round"
          variants={pathVariants}
          initial="initial"
          animate="animate"
          transition={{
            duration: svgOptions?.duration || 10,
            ease: "linear",
            repeat: Number.POSITIVE_INFINITY,
            repeatType: "loop",
            delay: Math.floor(Math.random() * 10),
            repeatDelay: Math.floor(Math.random() * 10 + 2),
          }}
          key={`path-first-${idx}`}
        />
      ))}

      {/* duplicate for more paths */}
      {paths.map((path, idx) => (
        <motion.path
          d={path}
          stroke={colors[idx % colors.length]}
          strokeWidth="2.3"
          strokeLinecap="round"
          variants={pathVariants}
          initial="initial"
          animate="animate"
          transition={{
            duration: svgOptions?.duration || 10,
            ease: "linear",
            repeat: Number.POSITIVE_INFINITY,
            repeatType: "loop",
            delay: Math.floor(Math.random() * 10),
            repeatDelay: Math.floor(Math.random() * 10 + 2),
          }}
          key={`path-second-${idx}`}
        />
      ))}
    </motion.svg>
  )
}

